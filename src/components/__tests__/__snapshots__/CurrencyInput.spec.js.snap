// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Currency Input should return the default setup correctly 1`] = `
<CurrencyInput
  currencySymbol="$"
  hasError={false}
  helperText=""
  onCurrencyValueChange={[MockFunction]}
  value="test value"
>
  <WithStyles(ForwardRef(InputLabel))
    htmlFor="amount"
  >
    <ForwardRef(InputLabel)
      classes={
        Object {
          "animated": "MuiInputLabel-animated",
          "asterisk": "MuiInputLabel-asterisk",
          "disabled": "Mui-disabled",
          "error": "Mui-error",
          "filled": "MuiInputLabel-filled",
          "focused": "Mui-focused",
          "formControl": "MuiInputLabel-formControl",
          "marginDense": "MuiInputLabel-marginDense",
          "outlined": "MuiInputLabel-outlined",
          "required": "Mui-required",
          "root": "MuiInputLabel-root",
          "shrink": "MuiInputLabel-shrink",
        }
      }
      htmlFor="amount"
    >
      <WithStyles(ForwardRef(FormLabel))
        className="MuiInputLabel-root MuiInputLabel-animated"
        classes={
          Object {
            "asterisk": "MuiInputLabel-asterisk",
            "disabled": "Mui-disabled",
            "error": "Mui-error",
            "focused": "Mui-focused",
            "required": "Mui-required",
          }
        }
        htmlFor="amount"
      >
        <ForwardRef(FormLabel)
          className="MuiInputLabel-root MuiInputLabel-animated"
          classes={
            Object {
              "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
              "colorSecondary": "MuiFormLabel-colorSecondary",
              "disabled": "Mui-disabled Mui-disabled",
              "error": "Mui-error Mui-error",
              "filled": "MuiFormLabel-filled",
              "focused": "Mui-focused Mui-focused",
              "required": "Mui-required Mui-required",
              "root": "MuiFormLabel-root",
            }
          }
          htmlFor="amount"
        >
          <label
            className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-animated"
            htmlFor="amount"
          >
            Amount
          </label>
        </ForwardRef(FormLabel)>
      </WithStyles(ForwardRef(FormLabel))>
    </ForwardRef(InputLabel)>
  </WithStyles(ForwardRef(InputLabel))>
  <WithStyles(ForwardRef(Input))
    error={false}
    id="amount"
    onChange={[MockFunction]}
    startAdornment={
      <ForwardRef(WithStyles)
        position="start"
      >
        $
      </ForwardRef(WithStyles)>
    }
    value="test value"
  >
    <ForwardRef(Input)
      classes={
        Object {
          "colorSecondary": "MuiInput-colorSecondary",
          "disabled": "Mui-disabled",
          "error": "Mui-error",
          "focused": "Mui-focused",
          "formControl": "MuiInput-formControl",
          "fullWidth": "MuiInput-fullWidth",
          "input": "MuiInput-input",
          "inputMarginDense": "MuiInput-inputMarginDense",
          "inputMultiline": "MuiInput-inputMultiline",
          "inputTypeSearch": "MuiInput-inputTypeSearch",
          "marginDense": "MuiInput-marginDense",
          "multiline": "MuiInput-multiline",
          "root": "MuiInput-root",
          "underline": "MuiInput-underline",
        }
      }
      error={false}
      id="amount"
      onChange={[MockFunction]}
      startAdornment={
        <ForwardRef(WithStyles)
          position="start"
        >
          $
        </ForwardRef(WithStyles)>
      }
      value="test value"
    >
      <WithStyles(ForwardRef(InputBase))
        classes={
          Object {
            "colorSecondary": "MuiInput-colorSecondary",
            "disabled": "Mui-disabled",
            "error": "Mui-error",
            "focused": "Mui-focused",
            "formControl": "MuiInput-formControl",
            "fullWidth": "MuiInput-fullWidth",
            "input": "MuiInput-input",
            "inputMarginDense": "MuiInput-inputMarginDense",
            "inputMultiline": "MuiInput-inputMultiline",
            "inputTypeSearch": "MuiInput-inputTypeSearch",
            "marginDense": "MuiInput-marginDense",
            "multiline": "MuiInput-multiline",
            "root": "MuiInput-root MuiInput-underline",
            "underline": null,
          }
        }
        error={false}
        fullWidth={false}
        id="amount"
        inputComponent="input"
        multiline={false}
        onChange={[MockFunction]}
        startAdornment={
          <ForwardRef(WithStyles)
            position="start"
          >
            $
          </ForwardRef(WithStyles)>
        }
        type="text"
        value="test value"
      >
        <ForwardRef(InputBase)
          classes={
            Object {
              "adornedEnd": "MuiInputBase-adornedEnd",
              "adornedStart": "MuiInputBase-adornedStart",
              "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
              "disabled": "Mui-disabled Mui-disabled",
              "error": "Mui-error Mui-error",
              "focused": "Mui-focused Mui-focused",
              "formControl": "MuiInputBase-formControl MuiInput-formControl",
              "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
              "input": "MuiInputBase-input MuiInput-input",
              "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
              "inputAdornedStart": "MuiInputBase-inputAdornedStart",
              "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
              "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
              "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
              "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
              "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
              "multiline": "MuiInputBase-multiline MuiInput-multiline",
              "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
            }
          }
          error={false}
          fullWidth={false}
          id="amount"
          inputComponent="input"
          multiline={false}
          onChange={[MockFunction]}
          startAdornment={
            <ForwardRef(WithStyles)
              position="start"
            >
              $
            </ForwardRef(WithStyles)>
          }
          type="text"
          value="test value"
        >
          <div
            className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-adornedStart"
            onClick={[Function]}
          >
            <WithStyles(ForwardRef(InputAdornment))
              position="start"
            >
              <ForwardRef(InputAdornment)
                classes={
                  Object {
                    "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                    "filled": "MuiInputAdornment-filled",
                    "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                    "marginDense": "MuiInputAdornment-marginDense",
                    "positionEnd": "MuiInputAdornment-positionEnd",
                    "positionStart": "MuiInputAdornment-positionStart",
                    "root": "MuiInputAdornment-root",
                  }
                }
                position="start"
              >
                <div
                  className="MuiInputAdornment-root MuiInputAdornment-positionStart"
                >
                  <WithStyles(ForwardRef(Typography))
                    color="textSecondary"
                  >
                    <ForwardRef(Typography)
                      classes={
                        Object {
                          "alignCenter": "MuiTypography-alignCenter",
                          "alignJustify": "MuiTypography-alignJustify",
                          "alignLeft": "MuiTypography-alignLeft",
                          "alignRight": "MuiTypography-alignRight",
                          "body1": "MuiTypography-body1",
                          "body2": "MuiTypography-body2",
                          "button": "MuiTypography-button",
                          "caption": "MuiTypography-caption",
                          "colorError": "MuiTypography-colorError",
                          "colorInherit": "MuiTypography-colorInherit",
                          "colorPrimary": "MuiTypography-colorPrimary",
                          "colorSecondary": "MuiTypography-colorSecondary",
                          "colorTextPrimary": "MuiTypography-colorTextPrimary",
                          "colorTextSecondary": "MuiTypography-colorTextSecondary",
                          "displayBlock": "MuiTypography-displayBlock",
                          "displayInline": "MuiTypography-displayInline",
                          "gutterBottom": "MuiTypography-gutterBottom",
                          "h1": "MuiTypography-h1",
                          "h2": "MuiTypography-h2",
                          "h3": "MuiTypography-h3",
                          "h4": "MuiTypography-h4",
                          "h5": "MuiTypography-h5",
                          "h6": "MuiTypography-h6",
                          "noWrap": "MuiTypography-noWrap",
                          "overline": "MuiTypography-overline",
                          "paragraph": "MuiTypography-paragraph",
                          "root": "MuiTypography-root",
                          "srOnly": "MuiTypography-srOnly",
                          "subtitle1": "MuiTypography-subtitle1",
                          "subtitle2": "MuiTypography-subtitle2",
                        }
                      }
                      color="textSecondary"
                    >
                      <p
                        className="MuiTypography-root MuiTypography-body1 MuiTypography-colorTextSecondary"
                      >
                        $
                      </p>
                    </ForwardRef(Typography)>
                  </WithStyles(ForwardRef(Typography))>
                </div>
              </ForwardRef(InputAdornment)>
            </WithStyles(ForwardRef(InputAdornment))>
            <input
              aria-invalid={false}
              className="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart"
              id="amount"
              onAnimationStart={[Function]}
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              type="text"
              value="test value"
            />
          </div>
        </ForwardRef(InputBase)>
      </WithStyles(ForwardRef(InputBase))>
    </ForwardRef(Input)>
  </WithStyles(ForwardRef(Input))>
  <WithStyles(ForwardRef(FormHelperText))
    error={false}
  >
    <ForwardRef(FormHelperText)
      classes={
        Object {
          "contained": "MuiFormHelperText-contained",
          "disabled": "Mui-disabled",
          "error": "Mui-error",
          "filled": "MuiFormHelperText-filled",
          "focused": "Mui-focused",
          "marginDense": "MuiFormHelperText-marginDense",
          "required": "Mui-required",
          "root": "MuiFormHelperText-root",
        }
      }
      error={false}
    >
      <p
        className="MuiFormHelperText-root"
      />
    </ForwardRef(FormHelperText)>
  </WithStyles(ForwardRef(FormHelperText))>
</CurrencyInput>
`;
