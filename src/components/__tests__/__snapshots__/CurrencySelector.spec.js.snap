// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Currency Selector should render the intial setup correctly 1`] = `
<CurrencySelector
  label=""
  onCurrencyChange={[MockFunction]}
  selectedCurrency="USD"
>
  <WithStyles(ForwardRef(InputLabel))
    id="currency"
  >
    <ForwardRef(InputLabel)
      classes={
        Object {
          "animated": "MuiInputLabel-animated",
          "asterisk": "MuiInputLabel-asterisk",
          "disabled": "Mui-disabled",
          "error": "Mui-error",
          "filled": "MuiInputLabel-filled",
          "focused": "Mui-focused",
          "formControl": "MuiInputLabel-formControl",
          "marginDense": "MuiInputLabel-marginDense",
          "outlined": "MuiInputLabel-outlined",
          "required": "Mui-required",
          "root": "MuiInputLabel-root",
          "shrink": "MuiInputLabel-shrink",
        }
      }
      id="currency"
    >
      <WithStyles(ForwardRef(FormLabel))
        className="MuiInputLabel-root MuiInputLabel-animated"
        classes={
          Object {
            "asterisk": "MuiInputLabel-asterisk",
            "disabled": "Mui-disabled",
            "error": "Mui-error",
            "focused": "Mui-focused",
            "required": "Mui-required",
          }
        }
        id="currency"
      >
        <ForwardRef(FormLabel)
          className="MuiInputLabel-root MuiInputLabel-animated"
          classes={
            Object {
              "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
              "colorSecondary": "MuiFormLabel-colorSecondary",
              "disabled": "Mui-disabled Mui-disabled",
              "error": "Mui-error Mui-error",
              "filled": "MuiFormLabel-filled",
              "focused": "Mui-focused Mui-focused",
              "required": "Mui-required Mui-required",
              "root": "MuiFormLabel-root",
            }
          }
          id="currency"
        >
          <label
            className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-animated"
            id="currency"
          />
        </ForwardRef(FormLabel)>
      </WithStyles(ForwardRef(FormLabel))>
    </ForwardRef(InputLabel)>
  </WithStyles(ForwardRef(InputLabel))>
  <WithStyles(ForwardRef(Select))
    id="currency"
    labelId="currency"
    onChange={[MockFunction]}
    value="USD"
  >
    <ForwardRef(Select)
      classes={
        Object {
          "disabled": "Mui-disabled",
          "filled": "MuiSelect-filled",
          "icon": "MuiSelect-icon",
          "iconFilled": "MuiSelect-iconFilled",
          "iconOpen": "MuiSelect-iconOpen",
          "iconOutlined": "MuiSelect-iconOutlined",
          "outlined": "MuiSelect-outlined",
          "root": "MuiSelect-root",
          "select": "MuiSelect-select",
          "selectMenu": "MuiSelect-selectMenu",
        }
      }
      id="currency"
      labelId="currency"
      onChange={[MockFunction]}
      value="USD"
    >
      <WithStyles(ForwardRef(Input))
        inputComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "IconComponent": [Function],
              "MenuProps": [Function],
              "SelectDisplayProps": [Function],
              "autoFocus": [Function],
              "autoWidth": [Function],
              "children": [Function],
              "className": [Function],
              "classes": [Function],
              "defaultValue": [Function],
              "disabled": [Function],
              "displayEmpty": [Function],
              "inputRef": [Function],
              "labelId": [Function],
              "multiple": [Function],
              "name": [Function],
              "onBlur": [Function],
              "onChange": [Function],
              "onClose": [Function],
              "onFocus": [Function],
              "onOpen": [Function],
              "open": [Function],
              "readOnly": [Function],
              "renderValue": [Function],
              "required": [Function],
              "tabIndex": [Function],
              "type": [Function],
              "value": [Function],
              "variant": [Function],
            },
            "render": [Function],
          }
        }
        inputProps={
          Object {
            "IconComponent": Object {
              "$$typeof": Symbol(react.memo),
              "compare": null,
              "displayName": "ArrowDropDownIcon",
              "muiName": "SvgIcon",
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "render": [Function],
              },
            },
            "MenuProps": undefined,
            "SelectDisplayProps": Object {
              "id": "currency",
            },
            "autoWidth": false,
            "children": Array [
              <ForwardRef(WithStyles)
                value="USD"
              >
                USD
              </ForwardRef(WithStyles)>,
              <ForwardRef(WithStyles)
                value="GBP"
              >
                GBP
              </ForwardRef(WithStyles)>,
              <ForwardRef(WithStyles)
                value="EUR"
              >
                EUR
              </ForwardRef(WithStyles)>,
            ],
            "classes": Object {
              "disabled": "Mui-disabled",
              "filled": "MuiSelect-filled",
              "icon": "MuiSelect-icon",
              "iconFilled": "MuiSelect-iconFilled",
              "iconOpen": "MuiSelect-iconOpen",
              "iconOutlined": "MuiSelect-iconOutlined",
              "outlined": "MuiSelect-outlined",
              "root": "MuiSelect-root",
              "select": "MuiSelect-select",
              "selectMenu": "MuiSelect-selectMenu",
            },
            "displayEmpty": false,
            "labelId": "currency",
            "multiple": false,
            "onClose": undefined,
            "onOpen": undefined,
            "open": undefined,
            "renderValue": undefined,
            "type": undefined,
            "variant": "standard",
          }
        }
        onChange={[MockFunction]}
        value="USD"
      >
        <ForwardRef(Input)
          classes={
            Object {
              "colorSecondary": "MuiInput-colorSecondary",
              "disabled": "Mui-disabled",
              "error": "Mui-error",
              "focused": "Mui-focused",
              "formControl": "MuiInput-formControl",
              "fullWidth": "MuiInput-fullWidth",
              "input": "MuiInput-input",
              "inputMarginDense": "MuiInput-inputMarginDense",
              "inputMultiline": "MuiInput-inputMultiline",
              "inputTypeSearch": "MuiInput-inputTypeSearch",
              "marginDense": "MuiInput-marginDense",
              "multiline": "MuiInput-multiline",
              "root": "MuiInput-root",
              "underline": "MuiInput-underline",
            }
          }
          inputComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "propTypes": Object {
                "IconComponent": [Function],
                "MenuProps": [Function],
                "SelectDisplayProps": [Function],
                "autoFocus": [Function],
                "autoWidth": [Function],
                "children": [Function],
                "className": [Function],
                "classes": [Function],
                "defaultValue": [Function],
                "disabled": [Function],
                "displayEmpty": [Function],
                "inputRef": [Function],
                "labelId": [Function],
                "multiple": [Function],
                "name": [Function],
                "onBlur": [Function],
                "onChange": [Function],
                "onClose": [Function],
                "onFocus": [Function],
                "onOpen": [Function],
                "open": [Function],
                "readOnly": [Function],
                "renderValue": [Function],
                "required": [Function],
                "tabIndex": [Function],
                "type": [Function],
                "value": [Function],
                "variant": [Function],
              },
              "render": [Function],
            }
          }
          inputProps={
            Object {
              "IconComponent": Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "displayName": "ArrowDropDownIcon",
                "muiName": "SvgIcon",
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                },
              },
              "MenuProps": undefined,
              "SelectDisplayProps": Object {
                "id": "currency",
              },
              "autoWidth": false,
              "children": Array [
                <ForwardRef(WithStyles)
                  value="USD"
                >
                  USD
                </ForwardRef(WithStyles)>,
                <ForwardRef(WithStyles)
                  value="GBP"
                >
                  GBP
                </ForwardRef(WithStyles)>,
                <ForwardRef(WithStyles)
                  value="EUR"
                >
                  EUR
                </ForwardRef(WithStyles)>,
              ],
              "classes": Object {
                "disabled": "Mui-disabled",
                "filled": "MuiSelect-filled",
                "icon": "MuiSelect-icon",
                "iconFilled": "MuiSelect-iconFilled",
                "iconOpen": "MuiSelect-iconOpen",
                "iconOutlined": "MuiSelect-iconOutlined",
                "outlined": "MuiSelect-outlined",
                "root": "MuiSelect-root",
                "select": "MuiSelect-select",
                "selectMenu": "MuiSelect-selectMenu",
              },
              "displayEmpty": false,
              "labelId": "currency",
              "multiple": false,
              "onClose": undefined,
              "onOpen": undefined,
              "open": undefined,
              "renderValue": undefined,
              "type": undefined,
              "variant": "standard",
            }
          }
          onChange={[MockFunction]}
          value="USD"
        >
          <WithStyles(ForwardRef(InputBase))
            classes={
              Object {
                "colorSecondary": "MuiInput-colorSecondary",
                "disabled": "Mui-disabled",
                "error": "Mui-error",
                "focused": "Mui-focused",
                "formControl": "MuiInput-formControl",
                "fullWidth": "MuiInput-fullWidth",
                "input": "MuiInput-input",
                "inputMarginDense": "MuiInput-inputMarginDense",
                "inputMultiline": "MuiInput-inputMultiline",
                "inputTypeSearch": "MuiInput-inputTypeSearch",
                "marginDense": "MuiInput-marginDense",
                "multiline": "MuiInput-multiline",
                "root": "MuiInput-root MuiInput-underline",
                "underline": null,
              }
            }
            fullWidth={false}
            inputComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "propTypes": Object {
                  "IconComponent": [Function],
                  "MenuProps": [Function],
                  "SelectDisplayProps": [Function],
                  "autoFocus": [Function],
                  "autoWidth": [Function],
                  "children": [Function],
                  "className": [Function],
                  "classes": [Function],
                  "defaultValue": [Function],
                  "disabled": [Function],
                  "displayEmpty": [Function],
                  "inputRef": [Function],
                  "labelId": [Function],
                  "multiple": [Function],
                  "name": [Function],
                  "onBlur": [Function],
                  "onChange": [Function],
                  "onClose": [Function],
                  "onFocus": [Function],
                  "onOpen": [Function],
                  "open": [Function],
                  "readOnly": [Function],
                  "renderValue": [Function],
                  "required": [Function],
                  "tabIndex": [Function],
                  "type": [Function],
                  "value": [Function],
                  "variant": [Function],
                },
                "render": [Function],
              }
            }
            inputProps={
              Object {
                "IconComponent": Object {
                  "$$typeof": Symbol(react.memo),
                  "compare": null,
                  "displayName": "ArrowDropDownIcon",
                  "muiName": "SvgIcon",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "render": [Function],
                  },
                },
                "MenuProps": undefined,
                "SelectDisplayProps": Object {
                  "id": "currency",
                },
                "autoWidth": false,
                "children": Array [
                  <ForwardRef(WithStyles)
                    value="USD"
                  >
                    USD
                  </ForwardRef(WithStyles)>,
                  <ForwardRef(WithStyles)
                    value="GBP"
                  >
                    GBP
                  </ForwardRef(WithStyles)>,
                  <ForwardRef(WithStyles)
                    value="EUR"
                  >
                    EUR
                  </ForwardRef(WithStyles)>,
                ],
                "classes": Object {
                  "disabled": "Mui-disabled",
                  "filled": "MuiSelect-filled",
                  "icon": "MuiSelect-icon",
                  "iconFilled": "MuiSelect-iconFilled",
                  "iconOpen": "MuiSelect-iconOpen",
                  "iconOutlined": "MuiSelect-iconOutlined",
                  "outlined": "MuiSelect-outlined",
                  "root": "MuiSelect-root",
                  "select": "MuiSelect-select",
                  "selectMenu": "MuiSelect-selectMenu",
                },
                "displayEmpty": false,
                "labelId": "currency",
                "multiple": false,
                "onClose": undefined,
                "onOpen": undefined,
                "open": undefined,
                "renderValue": undefined,
                "type": undefined,
                "variant": "standard",
              }
            }
            multiline={false}
            onChange={[MockFunction]}
            type="text"
            value="USD"
          >
            <ForwardRef(InputBase)
              classes={
                Object {
                  "adornedEnd": "MuiInputBase-adornedEnd",
                  "adornedStart": "MuiInputBase-adornedStart",
                  "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                  "disabled": "Mui-disabled Mui-disabled",
                  "error": "Mui-error Mui-error",
                  "focused": "Mui-focused Mui-focused",
                  "formControl": "MuiInputBase-formControl MuiInput-formControl",
                  "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                  "input": "MuiInputBase-input MuiInput-input",
                  "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                  "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                  "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                  "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                  "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                  "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                  "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                  "multiline": "MuiInputBase-multiline MuiInput-multiline",
                  "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                }
              }
              fullWidth={false}
              inputComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "propTypes": Object {
                    "IconComponent": [Function],
                    "MenuProps": [Function],
                    "SelectDisplayProps": [Function],
                    "autoFocus": [Function],
                    "autoWidth": [Function],
                    "children": [Function],
                    "className": [Function],
                    "classes": [Function],
                    "defaultValue": [Function],
                    "disabled": [Function],
                    "displayEmpty": [Function],
                    "inputRef": [Function],
                    "labelId": [Function],
                    "multiple": [Function],
                    "name": [Function],
                    "onBlur": [Function],
                    "onChange": [Function],
                    "onClose": [Function],
                    "onFocus": [Function],
                    "onOpen": [Function],
                    "open": [Function],
                    "readOnly": [Function],
                    "renderValue": [Function],
                    "required": [Function],
                    "tabIndex": [Function],
                    "type": [Function],
                    "value": [Function],
                    "variant": [Function],
                  },
                  "render": [Function],
                }
              }
              inputProps={
                Object {
                  "IconComponent": Object {
                    "$$typeof": Symbol(react.memo),
                    "compare": null,
                    "displayName": "ArrowDropDownIcon",
                    "muiName": "SvgIcon",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "render": [Function],
                    },
                  },
                  "MenuProps": undefined,
                  "SelectDisplayProps": Object {
                    "id": "currency",
                  },
                  "autoWidth": false,
                  "children": Array [
                    <ForwardRef(WithStyles)
                      value="USD"
                    >
                      USD
                    </ForwardRef(WithStyles)>,
                    <ForwardRef(WithStyles)
                      value="GBP"
                    >
                      GBP
                    </ForwardRef(WithStyles)>,
                    <ForwardRef(WithStyles)
                      value="EUR"
                    >
                      EUR
                    </ForwardRef(WithStyles)>,
                  ],
                  "classes": Object {
                    "disabled": "Mui-disabled",
                    "filled": "MuiSelect-filled",
                    "icon": "MuiSelect-icon",
                    "iconFilled": "MuiSelect-iconFilled",
                    "iconOpen": "MuiSelect-iconOpen",
                    "iconOutlined": "MuiSelect-iconOutlined",
                    "outlined": "MuiSelect-outlined",
                    "root": "MuiSelect-root",
                    "select": "MuiSelect-select",
                    "selectMenu": "MuiSelect-selectMenu",
                  },
                  "displayEmpty": false,
                  "labelId": "currency",
                  "multiple": false,
                  "onClose": undefined,
                  "onOpen": undefined,
                  "open": undefined,
                  "renderValue": undefined,
                  "type": undefined,
                  "variant": "standard",
                }
              }
              multiline={false}
              onChange={[MockFunction]}
              type="text"
              value="USD"
            >
              <div
                className="MuiInputBase-root MuiInput-root MuiInput-underline"
                onClick={[Function]}
              >
                <ForwardRef(SelectInput)
                  IconComponent={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "displayName": "ArrowDropDownIcon",
                      "muiName": "SvgIcon",
                      "type": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "render": [Function],
                      },
                    }
                  }
                  SelectDisplayProps={
                    Object {
                      "id": "currency",
                    }
                  }
                  autoWidth={false}
                  className="MuiInputBase-input MuiInput-input"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "filled": "MuiSelect-filled",
                      "icon": "MuiSelect-icon",
                      "iconFilled": "MuiSelect-iconFilled",
                      "iconOpen": "MuiSelect-iconOpen",
                      "iconOutlined": "MuiSelect-iconOutlined",
                      "outlined": "MuiSelect-outlined",
                      "root": "MuiSelect-root",
                      "select": "MuiSelect-select",
                      "selectMenu": "MuiSelect-selectMenu",
                    }
                  }
                  displayEmpty={false}
                  inputRef={[Function]}
                  labelId="currency"
                  multiple={false}
                  onAnimationStart={[Function]}
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  value="USD"
                  variant="standard"
                >
                  <div
                    aria-haspopup="listbox"
                    aria-labelledby="currency currency"
                    className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                    id="currency"
                    onBlur={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onMouseDown={[Function]}
                    role="button"
                    tabIndex={0}
                  >
                    USD
                  </div>
                  <input
                    onAnimationStart={[Function]}
                    type="hidden"
                    value="USD"
                  />
                  <ForwardRef
                    className="MuiSelect-icon"
                  >
                    <WithStyles(ForwardRef(SvgIcon))
                      className="MuiSelect-icon"
                    >
                      <ForwardRef(SvgIcon)
                        className="MuiSelect-icon"
                        classes={
                          Object {
                            "colorAction": "MuiSvgIcon-colorAction",
                            "colorDisabled": "MuiSvgIcon-colorDisabled",
                            "colorError": "MuiSvgIcon-colorError",
                            "colorPrimary": "MuiSvgIcon-colorPrimary",
                            "colorSecondary": "MuiSvgIcon-colorSecondary",
                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                            "root": "MuiSvgIcon-root",
                          }
                        }
                      >
                        <svg
                          aria-hidden="true"
                          className="MuiSvgIcon-root MuiSelect-icon"
                          focusable="false"
                          role="presentation"
                          viewBox="0 0 24 24"
                        >
                          <path
                            d="M7 10l5 5 5-5z"
                          />
                        </svg>
                      </ForwardRef(SvgIcon)>
                    </WithStyles(ForwardRef(SvgIcon))>
                  </ForwardRef>
                  <WithStyles(ForwardRef(Menu))
                    MenuListProps={
                      Object {
                        "aria-labelledby": "currency",
                        "disableListWrap": true,
                        "role": "listbox",
                      }
                    }
                    PaperProps={
                      Object {
                        "style": Object {
                          "minWidth": undefined,
                        },
                      }
                    }
                    anchorEl={
                      <div
                        aria-haspopup="listbox"
                        aria-labelledby="currency currency"
                        class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                        id="currency"
                        role="button"
                        tabindex="0"
                      >
                        USD
                      </div>
                    }
                    id="menu-"
                    onClose={[Function]}
                    open={false}
                  >
                    <ForwardRef(Menu)
                      MenuListProps={
                        Object {
                          "aria-labelledby": "currency",
                          "disableListWrap": true,
                          "role": "listbox",
                        }
                      }
                      PaperProps={
                        Object {
                          "style": Object {
                            "minWidth": undefined,
                          },
                        }
                      }
                      anchorEl={
                        <div
                          aria-haspopup="listbox"
                          aria-labelledby="currency currency"
                          class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                          id="currency"
                          role="button"
                          tabindex="0"
                        >
                          USD
                        </div>
                      }
                      classes={
                        Object {
                          "list": "MuiMenu-list",
                          "paper": "MuiMenu-paper",
                        }
                      }
                      id="menu-"
                      onClose={[Function]}
                      open={false}
                    >
                      <WithStyles(ForwardRef(Popover))
                        PaperProps={
                          Object {
                            "classes": Object {
                              "root": "MuiMenu-paper",
                            },
                            "style": Object {
                              "minWidth": undefined,
                            },
                          }
                        }
                        anchorEl={
                          <div
                            aria-haspopup="listbox"
                            aria-labelledby="currency currency"
                            class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                            id="currency"
                            role="button"
                            tabindex="0"
                          >
                            USD
                          </div>
                        }
                        anchorOrigin={
                          Object {
                            "horizontal": "left",
                            "vertical": "top",
                          }
                        }
                        getContentAnchorEl={[Function]}
                        id="menu-"
                        onClose={[Function]}
                        onEntering={[Function]}
                        open={false}
                        transformOrigin={
                          Object {
                            "horizontal": "left",
                            "vertical": "top",
                          }
                        }
                        transitionDuration="auto"
                      >
                        <ForwardRef(Popover)
                          PaperProps={
                            Object {
                              "classes": Object {
                                "root": "MuiMenu-paper",
                              },
                              "style": Object {
                                "minWidth": undefined,
                              },
                            }
                          }
                          anchorEl={
                            <div
                              aria-haspopup="listbox"
                              aria-labelledby="currency currency"
                              class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                              id="currency"
                              role="button"
                              tabindex="0"
                            >
                              USD
                            </div>
                          }
                          anchorOrigin={
                            Object {
                              "horizontal": "left",
                              "vertical": "top",
                            }
                          }
                          classes={
                            Object {
                              "paper": "MuiPopover-paper",
                              "root": "MuiPopover-root",
                            }
                          }
                          getContentAnchorEl={[Function]}
                          id="menu-"
                          onClose={[Function]}
                          onEntering={[Function]}
                          open={false}
                          transformOrigin={
                            Object {
                              "horizontal": "left",
                              "vertical": "top",
                            }
                          }
                          transitionDuration="auto"
                        >
                          <ForwardRef(Modal)
                            BackdropProps={
                              Object {
                                "invisible": true,
                              }
                            }
                            className="MuiPopover-root"
                            container={
                              <body>
                                <div
                                  class="app"
                                  id="app"
                                >
                                  <label
                                    class="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-animated"
                                    id="currency"
                                  >
                                    
                                  </label>
                                  <div
                                    class="MuiInputBase-root MuiInput-root MuiInput-underline"
                                  >
                                    <div
                                      aria-haspopup="listbox"
                                      aria-labelledby="currency currency"
                                      class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                      id="currency"
                                      role="button"
                                      tabindex="0"
                                    >
                                      USD
                                    </div>
                                    <input
                                      type="hidden"
                                      value="USD"
                                    />
                                    <svg
                                      aria-hidden="true"
                                      class="MuiSvgIcon-root MuiSelect-icon"
                                      focusable="false"
                                      role="presentation"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        d="M7 10l5 5 5-5z"
                                      />
                                    </svg>
                                  </div>
                                </div>
                              </body>
                            }
                            id="menu-"
                            onClose={[Function]}
                            open={false}
                          />
                        </ForwardRef(Popover)>
                      </WithStyles(ForwardRef(Popover))>
                    </ForwardRef(Menu)>
                  </WithStyles(ForwardRef(Menu))>
                </ForwardRef(SelectInput)>
              </div>
            </ForwardRef(InputBase)>
          </WithStyles(ForwardRef(InputBase))>
        </ForwardRef(Input)>
      </WithStyles(ForwardRef(Input))>
    </ForwardRef(Select)>
  </WithStyles(ForwardRef(Select))>
</CurrencySelector>
`;
